{"version":3,"sources":["components/Form.jsx","components/Song.jsx","components/Artist.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","setLyricsSearch","useState","artist","song","dataSearch","setDataSearch","error","setError","updateState","event","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","onChange","Song","lyrics","length","Artist","artistInfo","Object","keys","strArtistThumb","strGenre","strBiographyEN","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","lyricsSearch","setLyrics","setArtistInfo","useEffect","a","url","urlInfoArtist","Promise","all","axios","get","information","data","artists","fetchApiLyrics","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a634fda4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst Form = ({ setLyricsSearch }) => {\r\n  const [dataSearch, setDataSearch] = useState({\r\n    artist: '',\r\n    song: '',\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const { artist, song } = dataSearch;\r\n\r\n  // FunciÃ³n para leer el contenido de cada input\r\n  const updateState = (event) => {\r\n    setDataSearch({\r\n      ...dataSearch,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Consultar las APIS\r\n  const searchInfo = (event) => {\r\n    event.preventDefault();\r\n    if (artist.trim() === '' || song.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    //Pasar al componente principal\r\n    setLyricsSearch(dataSearch);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-info\">\r\n      {error ? <p className=\"alert alert-danger text-center p-2\">All fields are required.</p> : null}\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <form className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\" onSubmit={searchInfo}>\r\n            <fieldset>\r\n              <legend className=\"text-center\">Search Lyrics Songs</legend>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"artist\">Artist</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"artist\"\r\n                      id=\"artist\"\r\n                      placeholder=\"Artist Name\"\r\n                      onChange={updateState}\r\n                      value={artist}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"song\">Song</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"song\"\r\n                      id=\"song\"\r\n                      placeholder=\"Song Name\"\r\n                      onChange={updateState}\r\n                      value={song}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary float-right\">\r\n                Search\r\n              </button>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Song = ({ lyrics }) => {\r\n  if (lyrics.length === 0) return null;\r\n  return (\r\n    <Fragment>\r\n      <h2>Song Lyrics</h2>\r\n      <p className=\"letra\">{lyrics}</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","import React from 'react';\r\n\r\nconst Artist = ({ artistInfo }) => {\r\n  if (Object.keys(artistInfo).length === 0) return null;\r\n\r\n  const { strArtistThumb, strGenre, strBiographyEN } = artistInfo;\r\n  return (\r\n    <div className=\"card border-light\">\r\n      <div className=\"card-header bg-primary text-light font-weight-bold\">Artist Information</div>\r\n      <div className=\"card-body\">\r\n        <img src={strArtistThumb} alt=\"Artist Logo\" />\r\n        <p className=\"card-text\">Genre: {strGenre}</p>\r\n        <h2 className=\"card-text\">Biography</h2>\r\n        <p className=\"card-text\">{strBiographyEN}</p>\r\n        <p className=\"card-text\">\r\n          <a href={`https://${artistInfo.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-facebook\"></i>\r\n          </a>\r\n          <a href={`https://${artistInfo.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-twitter\"></i>\r\n          </a>\r\n          <a href={`${artistInfo.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-lastfm\"></i>\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Artist;\r\n","import React, { Fragment } from 'react';\r\nimport Form from './components/Form';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Song from './components/Song';\r\nimport Artist from './components/Artist';\r\n\r\nfunction App() {\r\n  const [lyricsSearch, setLyricsSearch] = useState({});\r\n  const [lyrics, setLyrics] = useState('');\r\n  const [artistInfo, setArtistInfo] = useState({});\r\n  useEffect(() => {\r\n    if (Object.keys(lyricsSearch).length === 0) return;\r\n\r\n    const fetchApiLyrics = async () => {\r\n      const { artist, song } = lyricsSearch;\r\n      const url = `https://api.lyrics.ovh/v1/${artist}/${song}`;\r\n      const urlInfoArtist = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artist}`;\r\n\r\n      const [lyrics, information] = await Promise.all([axios.get(url), axios.get(urlInfoArtist)]);\r\n\r\n      setLyrics(lyrics.data.lyrics);\r\n      setArtistInfo(information.data.artists[0]);\r\n\r\n      setLyricsSearch({});\r\n    };\r\n\r\n    fetchApiLyrics();\r\n  }, [lyricsSearch, artistInfo]);\r\n  return (\r\n    <Fragment>\r\n      <Form setLyricsSearch={setLyricsSearch} />\r\n      <div className=\"container mt-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <Artist artistInfo={artistInfo} />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Song lyrics={lyrics} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}